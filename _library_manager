#!/bin/bash
#
# Manager for assembling library

### Params and prelims
FILE_NAME=$(cat "package.json" | jq -r '.name')
VERSION=$(cat "package.json" | jq -r '.version')
export BLA="\033[30m"
export RED="\033[31m"
export GRE="\033[32m"
export YEL="\033[33m"
export BLU="\033[34m"
export MAG="\033[35m"
export CYA="\033[36m"
export WHI="\033[37m"

#######################################
# Prints options for this script
# Globals:
#   None
# Arguments:
#   None
#######################################
function _usage() {
  echo -e """${GRE}
  =======================================================
    _library_manager usage:
  -------------------------------------------------------
    ${WHI}--help          ${GRE}-  Show this usage
    ${WHI}--build-umd     ${GRE}-  Assemble umd & react part in ./dist
    ${WHI}--build-worker  ${GRE}-  Build separate worker script(s)
    ${WHI}--build-ngx     ${GRE}-  Assemble ngx part in ./dist
    ${WHI}--build         ${GRE}-  Assemble complete lib in ./dist and package locally
    ${WHI}--dev           ${GRE}-  Serve up src code directly
    ${WHI}--dev-worker    ${GRE}-  Serve up worker
    ${WHI}--dev-react     ${GRE}-  Watch builds and serve demo-react
  =======================================================
  """
}

#######################################
# Colored wrapper around echo for pretty
#   printing
# Globals:
#   None
# Arguments:
#   - Text to print
#######################################
function _print() {
  echo -e "${GRE}>>> ${1}${WHI}"
}

#######################################
# Begin development server acting
#   directly on the src code
# Globals:
#   None
# Arguments:
#   None
#######################################
function _develop() {
  ./node_modules/.bin/parcel serve -p 3000 src/dev.html
}

#######################################
# Start watching builds on src code and
#   running parralel on output; useful
#   when you want to develop react
#   consumption of the lib; but makes for
#   a slow dev experience
# Globals:
#   None
# Arguments:
#   All script args
#######################################
function _develop_react() {
  # ./node_modules/.bin/parcel serve -p 3000 src/dev.html
  ./node_modules/.bin/tsdx watch &
  PID=$!
  ./_demo_manager --react
  pkill $PID

}

#######################################
# Build umd and modules part of dist
# Globals:
#   None
# Arguments:
#   All script args
#######################################
function _build_umd() {
  _print "Building cjs,umd,esm..."
  ./node_modules/.bin/tsdx build --format cjs,esm,umd --name SbnSolarSystemViewer

  _print "Copy umd demo-umd"
  cp dist/*.umd.*.*js* demo-umd
}

#######################################
# Build
# Globals:
#   None
# Arguments:
#   All script args
#######################################
function _build_worker() {
  _print "Building worker..."

  _print "Compile worker code..."
  # BUNDLE_THREE=true ./node_modules/.bin/tsdx build --entry src/threejs/workers/asteroid-belt-worker.ts --format umd --name worker
  # BUNDLE_THREE=true ./node_modules/.bin/tsdx build --entry src/threejs/workers/asteroid-belt-worker.ts --format esm --name worker
  ./node_modules/.bin/rollup -c worker-rollup.config.js

  _print "Copy compiled worker to dist-worker ..."
  # local dist_worker="dist-worker"
  # [ -d "$dist_worker" ] && rm -rf "$dist_worker"
  # mkdir "$dist_worker"
  # cp "./dist/worker.esm.development.js" "${dist_worker}/asteroid-belt-worker-${VERSION}.js"
}

#######################################
# Develop worker
# Globals:
#   None
# Arguments:
#   All script args
#######################################
function _dev_worker() {
  _print "Develop worker..."
  ./node_modules/.bin/rollup -c worker-rollup.config.js --watch
}

#######################################
# Create local package and install into
#   demo-ngx and demo-cra to test that
#   the package's module can be
#   properly consumed
# Globals:
#   None
# Arguments:
#   None
#######################################
function _package_locally() {

  _print "Creating dist/package.json"
  ./_package_lib.ts

  _print "Creating local package from dist"
  cd dist
  npm pack .
  mv "${FILE_NAME}-"*".tgz" "../${FILE_NAME}.tgz"
  cd ..

  _print "Installing into demo-ngx"
  cp "${FILE_NAME}.tgz" "demo-ngx/${FILE_NAME}.tgz"
  cd demo-ngx
  npm install "file:/./${FILE_NAME}.tgz" --force
  cd ..

  _print "Installing into demo-cra"
  mv "${FILE_NAME}.tgz" "demo-cra/${FILE_NAME}.tgz"
  cd demo-cra
  npm install "file:/./${FILE_NAME}.tgz" --force
  cd ..
}

#######################################
# Build and install ngx part of dist
# Globals:
#   None
# Arguments:
#   None
#######################################
function _build_ngx() {

  _print "Building ngx library"
  _print "Refreshing ngx-lib dirs"
  ngxDest="src-ngx-lib/projects/ngx-wrapper/src/lib/widgetSrc"
  [ -d dist/ngx ] && rm -rf dist/ngx
  [ ! -d dist/ngx ] && mkdir dist/ngx
  [ -d $ngxDest ] && rm -rf $ngxDest
  [ ! -d $ngxDest ] && mkdir -p $ngxDest

  _print "Copying tsdx-built modules to ngx-builder lib"
  cp -R dist/* $ngxDest

  _print "Building ngx library called 'NgxWrapper'"
  cd src-ngx-lib
  npm i
  ./node_modules/.bin/ng build NgxWrapper
  cd ..

  _print "Copying newly created ngx lib to dist"
  cp -R src-ngx-lib/dist/ngx-wrapper dist/ngx
  echo "??? >>> "$?
  ls dist
  echo "What is going on here?"
}

#######################################
# Compiles src to consumables
# Globals:
#   None
# Arguments:
#   None
#######################################
function _build() {
  _build_umd
  _build_ngx
  _package_locally
}

main() {
  case "$1" in
  "--help" | "help")
    _usage
    ;;
  "--build")
    _build
    ;;
  "--build-worker")
    _build_worker
    ;;
  "--build-umd")
    _build_umd
    ;;
  "--build-quick")
    _build_umd
    ;;
  "--build-ngx")
    _build_ngx
    ;;
  "--dev-worker")
    echo "Developing worker"
    _dev_worker
    ;;
  "--dev")
    _develop
    ;;
  "--dev-react")
    _develop_react
    ;;
  *)
    echo >&2 "Invalid option: $@"
    _usage
    return 1
    ;;
  esac
}

main "$@"
